class Hotel(Resource):
    """
        Classe com Construtor como atributos de classe que utiliza o reqparser
        para analisar as requisições e garantir que somente o que é necessário
        será aceito. 
    """
    argumentos = reqparse.RequestParser()
    argumentos.add_argument('nome')
    argumentos.add_argument('estrelas')
    argumentos.add_argument('diaria')
    argumentos.add_argument('cidade')

    def find_hotel(hotel_id):
        for hotel in hoteis:
            if hotel['hotel_id'] == hotel_id:
                return hotel
        return None

    def get(self, hotel_id):
        hotel = Hotel.find_hotel(hotel_id)
        if hotel:
            return hotel
        return {'message': 'Hotel not found!'}, 404

    def post(self, hotel_id):

        # dados = Hotel.argumentos.parse_args()
        # novo_hotel = {
        #     'hotel_id': hotel_id,
        #     'nome': dados['nome'],
        #     'estrelas': dados['estrelas'],
        #     'diaria': dados['diaria'],
        #     'cidade': dados['cidade']
        # } All of this code here refactored become only this:
        # novo_hotel = { 'hotel_id': hotel_id, **dados }

        # bloco de refatoração que substitui o bloco acima comentado
        dados = Hotel.atributos.parse_args()
        hotel_objeto = HotelModel(hotel_id, **dados)
        novo_hotel = hotel_objeto.json()

        # continuação de ambos ou qualquer um dos blocos acima na classe post
        hoteis.append(novo_hotel)
        return novo_hotel, 201

    def put(self, hotel_id):
        dados = Hotel.atributos.parse_args()
        # novo_hotel = { 'hotel_id': hotel_id, **dados } #substituído por...:
        hotel_objeto = HotelModel(hotel_id, **dados)     #...essa e...
        novo_hotel = hotel_objeto.json()                 #...essa linha tbm como no post 
        hotel = Hotel.find_hotel(hotel_id)
        if hotel:
            hotel.update(novo_hotel)
            return novo_hotel, 200
        hoteis.append(novo_hotel)
        return novo_hotel, 201  #201 == created/criado com sucesso

#############################################################################

# removido o def find_hotel que agora está sendo feito direto pela classe
# HotelModel em models/hotel.py

argumentos = reqparse.RequestParser()
argumentos.add_argument('nome')
argumentos.add_argument('estrelas')
argumentos.add_argument('diaria')
argumentos.add_argument('cidade')

def find_hotel(hotel_id):
    for hotel in hoteis:
        if hotel['hotel_id'] == hotel_id:
            return hotel
    return None

def get(self, hotel_id):
    hotel = Hotel.find_hotel(hotel_id)
    if hotel:
        return hotel
    return {'message': 'Hotel not found!'}, 404

##############################################################################

@clssmethod
    def find_hotel(cls, hotel_id):
        hotel = cls.query.filter_by(hotel_id=hotel_id) # SELECT * FROM hoteis WHERE hotel_id = hotel_id

##############################################################################

# removido de post em resources/hotel.py

def post(self, hotel_id):
        if HotelModel.find_hotel(hotel_id):
            return {'message': f'Hotel id "{hotel_id}" already exists.'}, 400

        dados = Hotel.atributos.parse_args()
        hotel = HotelModel(hotel_id, **dados)
        novo_hotel = hotel_objeto.json()
        hoteis.append(novo_hotel)
        return novo_hotel, 201

#####################################################################

# antes de refatorar o put em resources/hotel.py

def put(self, hotel_id):
        dados = Hotel.atributos.parse_args()
        hotel_objeto = HotelModel(hotel_id, **dados)
        novo_hotel = hotel_objeto.json() 
        hotel = Hotel.find_hotel(hotel_id)
        if hotel:
            hotel.update(novo_hotel)
            return novo_hotel, 200
        hoteis.append(novo_hotel)
        return novo_hotel, 201

##############################################################################

def put(self, hotel_id):
        dados = Hotel.atributos.parse_args() 
        hotel_encontrado = HotelModel.find_hotel(hotel_id)
        if hotel_encontrado:
            hotel_encontrado.update_hotel(**dados)
            hotel_encontrado.save_hotel()
            return hotel_encontrado.json(), 200
        hotel = HotelModel(hotel_id, **dados)
        try:
            hotel.save_hotel()
        except:
            return {'message': 'An internal error ocurred trying to save the hotel.'}, 500
        return hotel.json(), 201

##############################################################################

# antes de refatorar o delete em resources/hotel.py

def delete(self, hotel_id):
        """
            Usar global para que o python não confunda a variável hotel abaixo
            com o list comprehend como uma nova variável e não a já existente.
        """
        global hoteis
        hoteis = [hotel for hotel in hoteis if hotel['hotel_id'] != hotel_id]
        return {'message': 'Hotel deleted.'}

##############################################################################

def delete(self, hotel_id):
        hotel = HotelModel.find_hotel(hotel_id)
        if hotel:
            try:
                hotel.delete_hotel()
            except:
                return {'message': 'An internal error ocurred trying to delete the hotel.'}, 500
            return {'message': 'Hotel deleted.'}
        return {'message': 'Hotel not found.'}, 404

##############################################################################

hoteis = [
    {
        'hotel_id': 'alpha',
        'nome': 'Alpha Hotel',
        'estrelas': 4.3,
        'diaria': 420.34,
        'cidade': 'Rio de Janeiro'
    },
    {
        'hotel_id': 'bravo',
        'nome': 'Bravo Hotel',
        'estrelas': 3.7,
        'diaria': 380.34,
        'cidade': 'Florianopolis'
    },
    {
        'hotel_id': 'espelunca',
        'nome': 'Espelunca Hotel',
        'estrelas': 2.5,
        'diaria': 120.34,
        'cidade': 'Sao Paulo'
    },
]

############################################################################